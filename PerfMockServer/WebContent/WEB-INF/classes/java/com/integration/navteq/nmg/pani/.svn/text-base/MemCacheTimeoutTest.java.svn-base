package com.integration.navteq.nmg.pani;

import static org.junit.Assert.fail;

import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.InetSocketAddress;
import java.util.ArrayList;


import junit.framework.Assert;
import net.spy.memcached.MemcachedClient;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;

import com.navteq.nmg.pani.image.enums.ImageSizeTypes;

import org.junit.Test;

public class MemCacheTimeoutTest {
	@Test
	public void testMemCacheTimeout() {
		try {
			MemcachedClient c = new MemcachedClient(
				new InetSocketAddress("localhost", 11211));
			
			
			DefaultHttpClient httpclient = new DefaultHttpClient();
			String url = "http://localhost:8080/nmg/adserver?a=endusercheckin&affiliatenametag" +
				"=TEST&deviceserialnum=yrtirhvzwkzq&longitude=-96847000&latitude=41456822&localepref" + 
				"=en-us&responsetype=xml&keywords=tc_endusercheckin_pan&disablepani=false&ver=2.3";
			
			for (int i=0; i<2; i++) {
				HttpGet httpget = new HttpGet(url);
				HttpResponse response = httpclient.execute(httpget);
				HttpEntity entity = response.getEntity();
				InputStream is = entity.getContent();
				InputStreamReader isr = new InputStreamReader(is);
				BufferedReader br = new BufferedReader(isr);
			
				String output = "";
				String campaignid = "";
			
				while ((output = br.readLine()) != null) {
					if (output.contains("campaignid")) {
						campaignid = output.substring("<campaignid>".length(),output.indexOf("</campaignid>"));
						break;
					}
				}
				br.close();
			
				Assert.assertNotNull(c.get(campaignid + "_checkin"));
				Assert.assertNotNull(c.get("d" + campaignid));
				Assert.assertNotNull(c.get("p" + campaignid));
			
				Thread.sleep(15000);
			
				Assert.assertNull(c.get(campaignid + "_checkin"));
				Assert.assertNull(c.get("d" + campaignid));
				Assert.assertNull(c.get("p" + campaignid));
			}
			
		}  catch (Exception e) {
			fail(e.getMessage());
		}
	}
	
	@Test
	public void testMemCacheImagesTimeout() {
		try {			
			ArrayList<String> sizecodes = new ArrayList<String>();
			MemcachedClient c = new MemcachedClient(
					new InetSocketAddress("localhost", 11211));
			
			
			DefaultHttpClient httpclient = new DefaultHttpClient();
			String url = "http://localhost:8080/nmg/adserver?a=endusercheckin&" + 
				"affiliatenametag=TEST&deviceserialnum=yrtirhvzwkzq&longitude=-96847000&" + 
				"latitude=41456822&localepref=en-us&responsetype=xml&" +
				"keywords=tc_endusercheckin_pan_images&disablepani=false&" + 
				"ver=2.3&imagesizes=ALL&imagetype=URL&bannersizes=ALL";
			
			for (int i=0; i<2; i++) {
				HttpGet httpget = new HttpGet(url);
				HttpResponse response = httpclient.execute(httpget);
				HttpEntity entity = response.getEntity();
				
				InputStream is = entity.getContent();
				InputStreamReader isr = new InputStreamReader(is);
				BufferedReader br = new BufferedReader(isr);
			
				String output = "";
				String campaignid = "";
			
				while ((output = br.readLine()) != null) {
					if (output.contains("campaignid")) {
						campaignid = output.substring("<campaignid>".length(),output.indexOf("</campaignid>"));
					}
					else if (output.contains("<type>")) {
						sizecodes.add(output.substring("<type>".length(),output.indexOf("</type>")));
					}
				}
				br.close();
			
				Assert.assertNotNull(c.get(campaignid + "_checkin"));
				Assert.assertNotNull(c.get("d" + campaignid));
				Assert.assertNotNull(c.get("p" + campaignid));

				for (String sizecode : sizecodes) {
					Assert.assertNotNull(c.get(getImagePrefix(sizecode)
						+ campaignid + "_" + sizecode));
				}
			
				Thread.sleep(15000);
			
				Assert.assertNull(c.get(campaignid + "_checkin"));
				Assert.assertNull(c.get("d" + campaignid));
				Assert.assertNull(c.get("p" + campaignid));
				
				for (String sizecode : sizecodes) {
					Assert.assertNull(c.get("b" + campaignid + "_" + sizecode));
				}
			}
			
		}  catch (Exception e) {
			fail(e.getMessage());
		}
	}
	
	String getImagePrefix(String sizecode){
		try{
			ImageSizeTypes ist = ImageSizeTypes.getImageSizeTypeById(Integer.parseInt(sizecode));
			return ist.imageType().getCacheKey();
		}
		catch(Exception ex){
			return "";
		}
	}
}
