package com.navteq.nmg.mule.component;

import static org.junit.Assert.assertTrue;
import java.util.Random;
import org.junit.Test;

public class PANIFlowTest {
	PANIFlow paniFlow = new PANIFlow();
	
	@Test
	public void testAdSelected() {
		Random rand = new Random();
		
		// Case #1: always return true if ad rotation is false
		assertTrue(paniFlow.adSelected(false, rand, 5, 4));
		
		// Case #2: always return true if number needed is same as number left
		assertTrue(paniFlow.adSelected(true, rand, 4, 4));
		
		// Case #3: always return true if number needed is greater than number left
		assertTrue(paniFlow.adSelected(true, rand, 3, 4));
		
		// Case #4: always return number needed
		int counter = 0;
		int numberNeeded = 4;
		int numberLeft = 10;
		for (int i = 0; i < numberLeft; i++) {
			if (paniFlow.adSelected(true, rand, numberLeft-i, numberNeeded-counter)) {
				counter ++;
			}
		}
		assertTrue(counter == numberNeeded);
	}

}
