package com.navteq.nmg.hashtable.renderers;

import org.apache.commons.io.EndianUtils;
import org.apache.commons.io.output.ByteArrayOutputStream;
import org.junit.Test;

import com.navteq.nmg.hashtable.IHashDataType.HashDataType;
import com.navteq.nmg.hashtable.renderers.BaseHashDataTypeRenderer;
import com.navteq.nmg.hashtable.renderers.ByteArrayHashDataTypeRenderer;
import com.navteq.nmg.hashtable.renderers.IntegerArrayHashDataTypeRenderer;
import com.navteq.nmg.hashtable.renderers.IntegerHashDataTypeRenderer;

public class IntegerArrayHashDataTypeRendererTest extends HashDataTypeTestHelper{

	private static final String FIELD_NAME = "fieldName";
	private static final int[] DATA = {2,1,1,2,255,1234567890,0}; 
	
	@Test
	public void verifyConstructor() throws Exception{
		IntegerArrayHashDataTypeRenderer bhdt = new IntegerArrayHashDataTypeRenderer(FIELD_NAME, DATA);
		assertConstructor(
			FIELD_NAME, 
			HashDataType.HASH_INTARRAY,
			ByteArrayHashDataTypeRenderer.SIZEOF_HEADER_FIELDNAME_LENGTH_FIELD
			   +FIELD_NAME.length()
			   +ByteArrayHashDataTypeRenderer.SIZEOF_DATATYPE_INDICATOR_SIZE
			   +ByteArrayHashDataTypeRenderer.SIZEOF_VALUE_LENGTH_FIELD
			   +DATA.length*IntegerHashDataTypeRenderer.INTEGER_FIELD_SIZE, 
			bhdt);
	}	
	
	@Test
	public void verifyInjectStream() throws Exception{
		IntegerArrayHashDataTypeRenderer bhdt = new IntegerArrayHashDataTypeRenderer(FIELD_NAME, DATA);

		byte[] encodedFieldName = FIELD_NAME.getBytes(ENCODING);
		ByteArrayOutputStream baos = new ByteArrayOutputStream();
		
		bhdt.injectStream(baos);
		byte[] result = baos.toByteArray();
		
		byte[] valueLengthField = new byte[IntegerArrayHashDataTypeRenderer.SIZEOF_VALUE_LENGTH_FIELD];
		int valueLength = DATA.length;
		EndianUtils.writeSwappedInteger(valueLengthField, 0, valueLength);
		
		ByteArrayOutputStream flippedData = new ByteArrayOutputStream();
		
		for (int data : DATA){
			EndianUtils.writeSwappedInteger(flippedData, data);
		}
		
		assertRender(encodedFieldName,bhdt.getHashDataType(),valueLengthField,flippedData.toByteArray(),result);		
	}		
	
	@Override
	BaseHashDataTypeRenderer getNewInstanceForBoundsChecking(String fieldName) throws Exception{
		return new IntegerArrayHashDataTypeRenderer(fieldName, DATA);
	}			
}