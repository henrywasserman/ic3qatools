<mule xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:spring="http://www.springframework.org/schema/beans" xmlns:context="http://www.springframework.org/schema/context" xmlns:stdio="http://www.mulesoft.org/schema/mule/stdio"
	xmlns:vm="http://www.mulesoft.org/schema/mule/vm" xmlns:file="http://www.mulesoft.org/schema/mule/file"
	xmlns:servlet="http://www.mulesoft.org/schema/mule/servlet"
	xmlns:management="http://www.mulesoft.org/schema/mule/management"
	xmlns:xm="http://www.mulesoft.org/schema/mule/xml" xmlns:http="http://www.mulesoft.org/schema/mule/http"
	xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:script="http://www.mulesoft.org/schema/mule/scripting"
	xsi:schemaLocation="
       http://www.springframework.org/schema/beans 
       http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
       http://www.springframework.org/schema/context 
       http://www.springframework.org/schema/context/spring-context-3.0.xsd
       http://www.mulesoft.org/schema/mule/core 
       META-INF/mule.xsd
       http://www.mulesoft.org/schema/mule/stdio 
       META-INF/mule-stdio.xsd
       http://www.mulesoft.org/schema/mule/vm 
       META-INF/mule-vm.xsd
       http://www.mulesoft.org/schema/mule/file 
       META-INF/mule-file.xsd
       http://www.mulesoft.org/schema/mule/servlet 
       META-INF/mule-servlet.xsd
       http://www.mulesoft.org/schema/mule/management 
       META-INF/mule-management.xsd 
       http://www.mulesoft.org/schema/mule/xml 
       META-INF/mule-xml.xsd
       http://www.mulesoft.org/schema/mule/http 
       classpath:META-INF/mule-http.xsd
       http://www.mulesoft.org/schema/mule/json 
       META-INF/mule-json.xsd
       http://www.mulesoft.org/schema/mule/scripting 
       META-INF/mule-scripting.xsd">

    <description>
		These are PANI related flows.
    </description>

    <!-- Transform the LPA params into dealmap http get query params (in a map) -->
    <custom-transformer name="LpaParamsToDealMapParams"
                      class="com.navteq.nmg.pani.transformer.LpaParamsToDealMapParamsTransformer">
    	<spring:property name="dealMapIdx" value ="${dealMapAPIKey}" ></spring:property>
        <spring:property name="distanceValue" value ="${distanceValue}" ></spring:property>
    </custom-transformer>


   <custom-transformer name="LpaParamsToMobileSpinachParams"
                      class="com.navteq.nmg.pani.transformer.LpaParamsToSpinachParamsTransformer">
                      	<spring:property name="SpinachApiKey" value ="${mobileSpinachAPIKey}" ></spring:property>                      
    </custom-transformer>
   
    
    <custom-transformer name="PANIHeaderToPANIList"
                     class="com.navteq.nmg.pani.transformer.PANIHeaderToPANIListTransformer"/>

    <!-- returnClass="org.w3c.dom.Node" -->
    <xm:xslt-transformer name="DealMapToLPAMessageNode"
                         xsl-file="DealMapDealToLpaMessage.xsl"
                         returnClass="java.lang.String">
        <xm:context-property key="paniUtil" value-ref="paniUtils"/>
		<xm:context-property key="storefrontId" value="#[header:INBOUND:storefrontid]"/>
        <xm:context-property key="sourceLatitude" value="#[header:INBOUND:sourceLatitude]"/>
        <xm:context-property key="sourceLongitude" value="#[header:INBOUND:sourceLongitude]"/>
        <xm:context-property key="isKilometers" value="#[header:INBOUND:isKilometers]"/>
        <xm:context-property key="fakePaniCreativeId" value="#[header:INBOUND:fakePaniCreativeId]"/>
        <xm:context-property key="apiKey" value="${dealMapAPIKey}"/>
        <xm:context-property key="affiliateName" value="#[header:INBOUND:affiliateName]"/>
        <xm:context-property key="lpaVersion" value="#[header:INBOUND:lpaVersion]"/>
        <xm:context-property key="lpaCreativeId" value="#[header:INBOUND:lpaCreativeId]"/>
        <xm:context-property key="defaultUserAction" value="#[header:INBOUND:defaultUserAction]"/>
        <xm:context-property key="imgUtil" value-ref="imgUtility"/>
        <xm:context-property key="distFormatter" value-ref = "distanceFormatter"/> 
    </xm:xslt-transformer>


 <xm:xslt-transformer name="MobileSpinachToLPAMessageNode"
                         xsl-file="MobileSpinachToLpaMessage.xsl"
                         returnClass="java.lang.String">
        <xm:context-property key="paniUtil" value-ref="paniUtils"/>
		<xm:context-property key="storefrontId" value="#[header:INBOUND:storefrontid]"/>
        <xm:context-property key="sourceLatitude" value="#[header:INBOUND:sourceLatitude]"/>
        <xm:context-property key="sourceLongitude" value="#[header:INBOUND:sourceLongitude]"/>
        <xm:context-property key="isKilometers" value="#[header:INBOUND:isKilometers]"/>
        <xm:context-property key="fakePaniCreativeId" value="#[header:INBOUND:fakePaniCreativeId]"/>
        <xm:context-property key="partnerName" value="#[header:INBOUND:partnerNameTag]"/>
        <xm:context-property key="affiliateName" value="#[header:INBOUND:affiliateName]"/>
        <xm:context-property key="apiKey" value="${mobileSpinachAPIKey}"/>
        <xm:context-property key="lpaVersion" value="#[header:INBOUND:lpaVersion]"/>
        <xm:context-property key="lpaCreativeId" value="#[header:INBOUND:lpaCreativeId]"/>
        <xm:context-property key="defaultUserAction" value="#[header:INBOUND:defaultUserAction]"/>
        <xm:context-property key="imgUtil" value-ref="imgUtility"/>
        <xm:context-property key="distFormatter" value-ref = "distanceFormatter"/> 
        <xm:context-property key="distFormatter" value-ref = "distanceFormatter"/> 
     
    </xm:xslt-transformer>

    <xm:xml-to-dom-transformer name="XmlToDom" returnClass="org.w3c.dom.Document"/>
    
    <!-- Add the object to byte array transformer -->
    <object-to-byte-array-transformer name="objectToByteArrayTransformer" />

    <flow name="JustProxyToComponent">
        <composite-source>
            <servlet:inbound-endpoint path="/pani">
                <transformer ref="ServletRequestBodyToParamMap"/>
            </servlet:inbound-endpoint>
            <vm:inbound-endpoint path="vm.adserver" exchange-pattern="request-response"/>
        </composite-source>
        <pooled-component>
        	<spring-object bean = "paniFlow"/>
        </pooled-component>
        <response>
        	<transformer ref = "XmlMessageToHashMessageTransformer"/>
			<!-- <pooled-component class="com.navteq.nmg.mule.component.LoggingFlow"/>  -->
			<transformer ref = "LoggingTransformer"/>
        </response>
        <default-exception-strategy>
        </default-exception-strategy>
    </flow>   

    <!-- This flow assumes that the input is a java.util.Map of parameters to send to LPA -->
    <flow name="OutboundAdServerInterface">
        <composite-source>
            <vm:inbound-endpoint path="vm.lpaAdapter"
                             exchange-pattern="request-response"
                             connector-ref="vmConn"/>
            <http:inbound-endpoint address="http://localhost:${gateway.mock.port1}/lpa/api1.aspx"
                             exchange-pattern="request-response"
                             connector-ref="httpConn">
                <transformer ref="HttpRequestBodyToParamMap"/>
            </http:inbound-endpoint>
        </composite-source>
        <http:outbound-endpoint address="${lpaAdServerAddress}"
                                exchange-pattern="request-response"
                                responseTimeout="${adserver.connection.timeout}"
	      	            	    keep-alive="true"
   	      	                	contentType="application/x-www-form-urlencoded; charset=UTF-8"
                                method="POST">
            <transformer ref="ParamMapToHttpQueryParams"/>
        </http:outbound-endpoint>
        <response>
            <transformer ref="PANIHeaderToPANIList"/>
            <transformer ref="objectToByteArrayTransformer"/>
        </response>
        <custom-exception-strategy class = "com.navteq.nmg.pani.errorhandler.PANIServiceExceptionStrategy" />
    </flow>

<!-- This flow assumes that the input is a java.util.Map of parameters to send to The DealMap -->
    <flow name="OutboundPaniInterface">
        <composite-source>
            <vm:inbound-endpoint path="vm.paniAdapter"
                             exchange-pattern="request-response"
                             connector-ref="vmConn"/>
            <http:inbound-endpoint address="http://localhost:${gateway.mock.port1}/dealmap"
                             exchange-pattern="request-response"
                             connector-ref="httpConn">
                <transformer ref="HttpRequestBodyToParamMap"/>
            </http:inbound-endpoint>
        </composite-source>
        <choice>
    		<when expression="INBOUND:partnerName=dealmap" evaluator="header">
      			<http:outbound-endpoint address="http://#[header:INBOUND:paniEndpoint]" 
                                exchange-pattern="request-response"
                                responseTimeout="${partner.connection.timeout}"
	      	                    keep-alive="true"
                                method="GET">
            		<transformer ref="LpaParamsToDealMapParams"/>
            		<transformer ref="ParamMapToHttpQueryParams"/>
        		</http:outbound-endpoint>
    		</when>
    		<otherwise>
    		<http:outbound-endpoint address="http://#[header:INBOUND:paniEndpoint]" 
                                exchange-pattern="request-response"
                                responseTimeout="${partner.connection.timeout}"
	      	                    keep-alive="true"
                                method="GET">
                                
                        <transformer ref="LpaParamsToMobileSpinachParams"/>                 
            		    <transformer ref="ParamMapToHttpQueryParams"/> 
            		     
            		    
        		</http:outbound-endpoint>
    		</otherwise>
 		</choice>
        <custom-exception-strategy class = "com.navteq.nmg.pani.errorhandler.PANIServiceExceptionStrategy" />
    </flow>

    <flow name="TransformPaniToLPA">
        <composite-source>
            <vm:inbound-endpoint path="vm.paniToLPAFormat"
                             exchange-pattern="request-response"
                             connector-ref="vmConn">
               <transformer ref="XmlToDom"/>
           </vm:inbound-endpoint>
        </composite-source>
        <choice>
    		<when expression="INBOUND:partnerName=dealmap" evaluator="header">
				<transformer ref="${dealmap.transformer.name}"/>
    		</when>
    		<otherwise>   
    			<transformer ref="MobileSpinachToLPAMessageNode"/>
    		</otherwise>
 		</choice>
        <default-exception-strategy>
        </default-exception-strategy>
    </flow>
    
    <flow name="OutboundDefaultAdServerInterface">
        <composite-source>
            <vm:inbound-endpoint path="vm.defaultLpaAdapter"
                             exchange-pattern="request-response"
                             connector-ref="vmConn"/>
            <http:inbound-endpoint address="http://localhost:${gateway.mock.port2}/lpa/api1.aspx"
                             exchange-pattern="request-response"
                             connector-ref="httpConn">
                <transformer ref="HttpRequestBodyToParamMap"/>
            </http:inbound-endpoint>
        </composite-source>
        <http:outbound-endpoint address="${lpaAdServerAddress}" 
                                exchange-pattern="request-response"
                                responseTimeout="${adserver.connection.timeout}" 
	      	                keep-alive="true"
                                method="GET">
            <transformer ref="ParamMapToHttpQueryParams"/>
        </http:outbound-endpoint>
        <response>
        	<transformer ref="PANIHeaderToPANIList"/>
        	<message-properties-transformer scope="outbound">
                <!-- Propagate 'Content-Type' from the inbound to outbound -->
                <add-message-property key="Content-Type" value="#[header:INBOUND:Content-Type]"/>
                <add-message-property key="Content-Length" value="#[header:INBOUND:Content-Length]"/>
        	</message-properties-transformer>
        </response>
        <custom-exception-strategy class = "com.navteq.nmg.pani.errorhandler.PANIServiceExceptionStrategy" />
    </flow>
        
    <flow name="API2Component">
        <composite-source>
            <servlet:inbound-endpoint path="/adserver2">
            </servlet:inbound-endpoint>
            <vm:inbound-endpoint path="vm.adserver2"
                                 exchange-pattern="request-response">
            </vm:inbound-endpoint>
        </composite-source>
        <pooled-component>
        	<spring-object bean = "api2Flow"/>
        </pooled-component>      
        <default-exception-strategy>
        </default-exception-strategy>
    </flow>
    
    <flow name="OutboundAdServerInterface2">
        <vm:inbound-endpoint path="vm.lpaAdapter2"
                             exchange-pattern="request-response"
                             connector-ref="vmConn"/>
        <http:outbound-endpoint address="${lpaAdServer2Address}?ver=#[header:INBOUND:ver]&amp;responsetype=#[header:INBOUND:responsetype]"
                                exchange-pattern="request-response"
                                responseTimeout="${adserver.connection.timeout}"
	      	                keep-alive="true"
                                method="POST">
        </http:outbound-endpoint>
        <response>
        	<message-properties-transformer scope="outbound">
                <!-- Propagate 'Content-Type' from the inbound to outbound -->
                <add-message-property key="Content-Type" value="#[header:INBOUND:Content-Type]"/>
                <add-message-property key="Content-Length" value="#[header:INBOUND:Content-Length]"/>
        	</message-properties-transformer>
        </response>
        <custom-exception-strategy class = "com.navteq.nmg.pani.errorhandler.PANIServiceExceptionStrategy" />
    </flow>
    
    
    
    
    
</mule>