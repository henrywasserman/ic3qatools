package com.navteq.nmg.hashtable.testdrivers;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.navteq.nmg.hashtable.IHashDataType.HashDataType;

public final class HashTable extends HashBase{
	
	private List<IHashContainer> chillinz;

	public HashTable(String key){

		super(key, HashDataType.HASH_TABLE);
		
		chillinz = new ArrayList<IHashContainer>();
	}

	@Override
	public void assertContentsAreTheSame(IHashContainer hashContainer) throws AssertionError {

		assertTrue(hashContainer instanceof HashTable);
		HashTable ht = (HashTable)hashContainer;
		assertEquals("Keys does not match.  Expected ["+this.key+"], actual ["+ht.key+"].", this.key,ht.key);
		assertEquals("Hash data types do not match.  Expected ["+this.hdt.toString()+"], actual ["+ht.hdt.toString()+"].",this.hdt,ht.hdt);
		assertEquals("Number of child elements do not match.  Expected ["+this.chillinz.size()+"], actual ["+ht.chillinz.size()+"].", this.chillinz.size(), ht.chillinz.size());

		// lets sort everything into a set of temp maps.  if the element count matches then we will just iterate 
		// and compare.  if they compare we will remove them from the map of each
		
		Map<String,IHashContainer> expectedMap= new HashMap<String,IHashContainer>();
		
		for(IHashContainer chillin: chillinz){
			
			IHashContainer hc = null;
			hc = expectedMap.get(chillin.getKey());
			if (hc != null){
				fail("Found a duplicate entry in the child elements ["+chillin.getKey()+"].  There should be nothing but unique keys.");
			}
			else{
				expectedMap.put(chillin.getKey(), chillin);
			}
		}
		
		// now lets iterate through the inbound list and look up values in our map...if there are any remaining
		// entries in either map, then we have failure
		
		for (IHashContainer actual : ht.chillinz){
			IHashContainer expected = expectedMap.get(actual.getKey());
			
			if (expected == null){
				// we gots izzuez
				fail("Entry for field ["+ actual.getKey()+"] not found in expected child list.");
			}
			else{
				expected.assertContentsAreTheSame(actual);
				expectedMap.remove(actual.getKey());					
			}
		}
		
		// we should be completely empty if we are equal
		assertTrue(expectedMap.isEmpty());
	}
	
	public void add(IHashContainer chillin){
		chillinz.add(chillin);
	}

	@Override
	public String displayContents() {

		StringBuilder sb = new StringBuilder();
		sb.append(getKey());
		sb.append(" = {");
		boolean firstTime = true;
		for (IHashContainer schillin : chillinz){
			if (firstTime){
				firstTime = false;
			}
			else{
				sb.append(", ");
			}
			sb.append(schillin.displayContents());
		}
		
		sb.append("}");
		return null;
	}
}
