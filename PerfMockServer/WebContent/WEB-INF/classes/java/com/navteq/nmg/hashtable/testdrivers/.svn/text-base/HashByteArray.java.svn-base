package com.navteq.nmg.hashtable.testdrivers;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

import com.navteq.nmg.hashtable.IHashDataType.HashDataType;

public final class HashByteArray extends HashBase{
	private byte[] value;
	public HashByteArray(String key, byte[] value){
		super(key,HashDataType.HASH_BOOLEAN);
		this.value = value;
	}

	@Override
	public void assertContentsAreTheSame(IHashContainer hashContainer) throws AssertionError {
		assertTrue(hashContainer instanceof HashByteArray);
		HashByteArray ht = (HashByteArray)hashContainer;
		assertEquals("Keys does not match.  Expected ["+this.key+"], actual ["+ht.key+"].", this.key,ht.key);
		assertEquals("Hash data types do not match.  Expected ["+this.hdt.toString()+"], actual ["+ht.hdt.toString()+"].",this.hdt,ht.hdt);
		
		try{
			
			
			assertEquals("Length of byte array is not what is expected.", this.value.length,ht.value.length);
			
			int offset = 0;
			
			// lets scour the byte array and compare values at each byte so if we find an issue in the testing we can toss
			// an assertion at the exact spot in the array things are jacked up
			
			// assert assert the field name contents
			while (offset < this.value.length){
				assertEquals(
				    "Byte array contents is not what was expected in offset["+Integer.toString(offset)+"]."
				    ,this.value[offset]
				    ,ht.value[offset]);
				
				offset++;
			}	
			
		}
		catch(AssertionError ae){
			System.out.println("Expected byte values:");
			ByteForByteContentComparer.showByteArrayAsHexDump(this.value);
			System.out.println("Actual byte values:");
			ByteForByteContentComparer.showByteArrayAsHexDump(ht.value);
			throw ae;
		}
	}

	@Override
	public String displayContents() {
		return getKey()+" = "+ value.toString();
	}		
}

