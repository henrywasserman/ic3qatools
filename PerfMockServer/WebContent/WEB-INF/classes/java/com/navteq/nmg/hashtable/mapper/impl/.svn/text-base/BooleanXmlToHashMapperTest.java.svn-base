package com.navteq.nmg.hashtable.mapper.impl;

import static org.mockito.Mockito.mock;

import java.net.URLEncoder;

import org.apache.commons.io.output.ByteArrayOutputStream;
import org.junit.Test;

import com.navteq.nmg.hashtable.IXmlEntryParser;
import com.navteq.nmg.hashtable.IHashDataType.HashDataType;
import com.navteq.nmg.hashtable.IMessageVersions.MessageVersionsType;
import com.navteq.nmg.hashtable.mapper.IIndexName;
import com.navteq.nmg.hashtable.mapper.IXmlToHashMapper;
import com.navteq.nmg.hashtable.mapper.impl.BooleanXmlToHashMapper;

public class BooleanXmlToHashMapperTest extends XmlToHashMapperHelper{
	
	private static final IIndexName NO_STORE_FRONT = new IndexName("mostroefront","nostorefront");
	
	@Test
	public void testConstructor() throws Exception{
		TestParent tp = new TestParent();
		assertConstructor(NO_STORE_FRONT, MessageVersionsType.VERSION_2_4, tp, false);
	}

	@Test
	public void testMapFromXmlToHash() throws Exception{
		String utfName = URLEncoder.encode(NO_STORE_FRONT.getIndexedName(), "UTF-8");
		int size = HEADER_LENGTH_FIELD_SIZE + utfName.length()+ DATATYPE_LENGTH_FIELD_SIZE + BYTE_SIZE;
		
		assertMapFromXmlToHash(createMapperInstance(NO_STORE_FRONT, MessageVersionsType.VERSION_2_4, new TestParent()),"0",1,size);		
	}

	@Test
	public void testStreamInjection() throws Exception{
		ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
		String utfName = URLEncoder.encode(NO_STORE_FRONT.getIndexedName(), "UTF-8");
		
		outputStream.write(new byte[]{(byte)utfName.length()});
		outputStream.write(utfName.getBytes());
		outputStream.write(HashDataType.HASH_BOOLEAN.encode());
		outputStream.write(new byte[]{(byte)0});
		
		byte[] expectedBytes = outputStream.toByteArray();
		assertStreamInjectedProperly(createMapperInstance(NO_STORE_FRONT, MessageVersionsType.VERSION_2_4, new TestParent()),"0", expectedBytes);
	}
	
	
	@Override
	protected IXmlEntryParser createParser() throws Exception {
		return mock(IXmlEntryParser.class);
	}

	@Override
	protected IXmlToHashMapper createMapperInstance(IIndexName xmlElementName,	MessageVersionsType mvt, IXmlToHashMapper parent) throws Exception {
		return new BooleanXmlToHashMapper(xmlElementName, mvt, parent);
	}	
}
