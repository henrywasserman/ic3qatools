package com.navteq.nmg.hashtable.renderers;

import org.apache.commons.io.EndianUtils;
import org.apache.commons.io.output.ByteArrayOutputStream;
import org.junit.Test;

import com.navteq.nmg.hashtable.IHashDataType.HashDataType;
import com.navteq.nmg.hashtable.renderers.BaseHashDataTypeRenderer;
import com.navteq.nmg.hashtable.renderers.LongHashDataTypeRenderer;


public class LongHashDataTypeRendererTest extends HashDataTypeTestHelper{

	private static final String FIELD_NAME = "fieldName";
	private static final long DATA = 12345678909876L; 
	
	@Test
	public void verifyConstructor() throws Exception{
		LongHashDataTypeRenderer bhdt = new LongHashDataTypeRenderer(FIELD_NAME, DATA);
		assertConstructor(
			FIELD_NAME, 
			HashDataType.HASH_LONG, 
			FIELD_NAME.length()
			   +LongHashDataTypeRenderer.LONG_FIELD_SIZE
			   +LongHashDataTypeRenderer.SIZEOF_DATATYPE_INDICATOR_SIZE
			   +LongHashDataTypeRenderer.SIZEOF_HEADER_FIELDNAME_LENGTH_FIELD, 
			bhdt);
	}	
	
	
	@Test
	public void verifyInjectStream() throws Exception{
		LongHashDataTypeRenderer bhdt = new LongHashDataTypeRenderer(FIELD_NAME, DATA);

		// make sure we are rendering properly
		byte[] encodedFieldName = FIELD_NAME.getBytes(ENCODING);
		ByteArrayOutputStream baos = new ByteArrayOutputStream();
		
		bhdt.injectStream(baos);
		byte[] result = baos.toByteArray();
		
		byte[] expectedValueContents = new byte[8];
		EndianUtils.writeSwappedLong(expectedValueContents, 0, DATA);
		assertRender(encodedFieldName,bhdt.getHashDataType(),null,expectedValueContents,result);		
	}		
	
	@Override
	BaseHashDataTypeRenderer getNewInstanceForBoundsChecking(String fieldName) throws Exception{
		return new LongHashDataTypeRenderer(fieldName, DATA);
	}			
}